<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Devops on Tom</title>
    <link>https://teh.github.io/tags/devops/</link>
    <description>Recent content in Devops on Tom</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Thu, 16 Feb 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://teh.github.io/tags/devops/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>systemd dynamic users</title>
      <link>https://teh.github.io/posts/systemd-dynamic-users/</link>
      <pubDate>Thu, 16 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://teh.github.io/posts/systemd-dynamic-users/</guid>
      <description>&lt;p&gt;systemd 232 introduced a really cool feature that allows running as a dynamically allocated user with &lt;code&gt;DynamicUser=yes&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Monitoring your NVidia GPU with Prometheus</title>
      <link>https://teh.github.io/posts/monitoring-nvidia-gpu-with-prometheus/</link>
      <pubDate>Thu, 25 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://teh.github.io/posts/monitoring-nvidia-gpu-with-prometheus/</guid>
      <description>&lt;p&gt;I have a &lt;a href=&#34;https://pcpartpicker.com/user/pahLa6fi/saved/&#34;target=&#34;_blank&#34;&gt;deep learning box&lt;/a&gt; that runs various computations on both CPU and GPU. The ability to off-load expensive computations from my laptop is fantastic.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Load balancing via iptables</title>
      <link>https://teh.github.io/posts/load-balancing-via-iptables/</link>
      <pubDate>Fri, 09 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://teh.github.io/posts/load-balancing-via-iptables/</guid>
      <description>&lt;p&gt;Traditionally balancing between web workers has been implemented with a prefork server. I.e. the controlling process opens a socket, forks a few workers who then &lt;code&gt;accept&lt;/code&gt; on that socket. The kernel will distribute the load accordingly.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>