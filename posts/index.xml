<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Tom&#39;s Blog</title>
    <link>https://teh.github.io/posts/</link>
    <description>Recent content in Posts on Tom&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Sun, 05 Jan 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://teh.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Replacing types in Postgraphile</title>
      <link>https://teh.github.io/posts/postgraphile-replace-type/</link>
      <pubDate>Sun, 05 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://teh.github.io/posts/postgraphile-replace-type/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.graphile.org/postgraphile/introduction/&#34;target=&#34;_blank&#34;&gt;Postgraphile&lt;/a&gt; comes with many good defaults out of the box, but occassionally it&#39;s necessary to replace a default type.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kernel Self Protection</title>
      <link>https://teh.github.io/posts/kernel-self-protection/</link>
      <pubDate>Sun, 04 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://teh.github.io/posts/kernel-self-protection/</guid>
      <description>&lt;p&gt;grsecrurity &lt;a href=&#34;https://grsecurity.net/passing_the_baton_faq.php&#34;target=&#34;_blank&#34;&gt;have stopped releasing&lt;/a&gt; their unstable kernel patches, leaving a bit of a void if you want to add those layers of protection to your kernel.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Nix hackathon March 2017</title>
      <link>https://teh.github.io/posts/nix-hackathon-march-2017/</link>
      <pubDate>Fri, 17 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://teh.github.io/posts/nix-hackathon-march-2017/</guid>
      <description>&lt;p&gt;Earlier this month &lt;a href=&#34;https://smarkets.com/&#34;target=&#34;_blank&#34;&gt;Smarkets&lt;/a&gt; was being awesome and hosted our 2nd Nix hackathon. We had a fantasic crowd of smart people, and the Smarkets office was downright amazing. We had standing desks with extra monitors. The coffee was so thick that it was still strong in homeopathic doses. We even had smarties on tap.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>systemd dynamic users</title>
      <link>https://teh.github.io/posts/systemd-dynamic-users/</link>
      <pubDate>Thu, 16 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://teh.github.io/posts/systemd-dynamic-users/</guid>
      <description>&lt;p&gt;systemd 232 introduced a really cool feature that allows running as a dynamically allocated user with &lt;code&gt;DynamicUser=yes&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emulating closed type classes with closed type families</title>
      <link>https://teh.github.io/posts/emulating-closed-type-classes-with-closed-type-families/</link>
      <pubDate>Wed, 18 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://teh.github.io/posts/emulating-closed-type-classes-with-closed-type-families/</guid>
      <description>&lt;p&gt;Haskell actually implements two languages: The value-level language, and a more limited type-level language that is evaluated at compile time.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>seccomp filters for NGINX</title>
      <link>https://teh.github.io/posts/seccomp-filters-for-nginx/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://teh.github.io/posts/seccomp-filters-for-nginx/</guid>
      <description>&lt;p&gt;Linux&amp;rsquo; BPF based &lt;a href=&#34;https://en.wikipedia.org/wiki/Seccomp&#34;target=&#34;_blank&#34;&gt;seccomp sandbox&lt;/a&gt; is a reasonably powerful way to stop processes from running arbitrary syscalls when owned (or by accident).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Writing HTML apps in Haskell - Part 2</title>
      <link>https://teh.github.io/posts/writing-html-apps-in-haskell-part-2/</link>
      <pubDate>Thu, 01 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://teh.github.io/posts/writing-html-apps-in-haskell-part-2/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;https://teh.github.io/2016/11/26/Writing-HTML-apps-in-Haskell-Part-1/&#34;&gt;part 1&lt;/a&gt; I described the basic two-process setup for accessing the DOM from within Haskell.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Writing HTML apps in Haskell - Part 1</title>
      <link>https://teh.github.io/posts/writing-html-apps-in-haskell-part-1/</link>
      <pubDate>Sat, 26 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://teh.github.io/posts/writing-html-apps-in-haskell-part-1/</guid>
      <description>&lt;p&gt;Recently I wanted to to build a user interface in Haskell that runs on my Gnome desktop, not in the cloud (the audience gasps).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Running your own OpenVPN</title>
      <link>https://teh.github.io/posts/running-your-own-openvpn/</link>
      <pubDate>Wed, 16 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://teh.github.io/posts/running-your-own-openvpn/</guid>
      <description>I consider privacy as important but I am not a government-conspiracy nut. Even so, the passed Investigatory powers bill is extreme, and it should worry you. Political avenues have been exhausted. Legal challenges are unlikely to succeed unless lawyers can argue that the IPB is incompatible with fundamental human rights.
The only option left is technology.
First, some motivation by showing examples of what will be stored. Here is the government&#39;s clarification of Internet Connection Records.</description>
    </item>
    
    <item>
      <title>Purescript&#39;s c&#43;&#43; backend</title>
      <link>https://teh.github.io/posts/purescript-s-c-backend/</link>
      <pubDate>Thu, 10 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://teh.github.io/posts/purescript-s-c-backend/</guid>
      <description></description>
    </item>
    
    <item>
      <title>IPython shells with nix, updated</title>
      <link>https://teh.github.io/posts/ipython-shells-with-nix-updated/</link>
      <pubDate>Thu, 03 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://teh.github.io/posts/ipython-shells-with-nix-updated/</guid>
      <description>&lt;p&gt;I&#39;ve written about IPython shells with Nix &lt;a href=&#34;https://theshortlog.com/2016/02/11/ipython-nix/&#34;target=&#34;_blank&#34;&gt;previously&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Adding error context in Nix</title>
      <link>https://teh.github.io/posts/adding-error-context-in-nix/</link>
      <pubDate>Mon, 03 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://teh.github.io/posts/adding-error-context-in-nix/</guid>
      <description>&lt;p&gt;I always have a tough time debugging Nix stack traces, especially when they occur deep in the module system.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>NixOS security-updates update</title>
      <link>https://teh.github.io/posts/nix-security-updates-update/</link>
      <pubDate>Sat, 01 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://teh.github.io/posts/nix-security-updates-update/</guid>
      <description>&lt;p&gt;This weekend Nicolas Pierron (&lt;a href=&#34;http://github.com/nbp&#34;target=&#34;_blank&#34;&gt;nbp&lt;/a&gt; on GitHub) came to London for a NixOS hackathon. He&#39;s been working on improving security updates in NixOS for a while. He&#39;s the author of the &lt;a href=&#34;http://nixos.org/nixos/manual/index.html#sec-modularity&#34;target=&#34;_blank&#34;&gt;NixOS module system&lt;/a&gt; amongst other things. He has a successful track record of complex, tree-wide changes so if anyone can nail this, it&#39;s him.&lt;/p&gt;
&lt;p&gt;The main output of our weekend is this blog post with his ideas.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Nginx in NixOS 16.09</title>
      <link>https://teh.github.io/posts/nginx-in-nixos-16-09/</link>
      <pubDate>Sun, 11 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://teh.github.io/posts/nginx-in-nixos-16-09/</guid>
      <description>&lt;p&gt;The beta release of &lt;a href=&#34;http://lists.science.uu.nl/pipermail/nix-dev/2016-September/021658.html&#34;target=&#34;_blank&#34;&gt;NixOS 16.09&lt;/a&gt; comes with a very cool config generator for your NGINX configuration. It makes it easy to:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Monitoring your NVidia GPU with Prometheus</title>
      <link>https://teh.github.io/posts/monitoring-nvidia-gpu-with-prometheus/</link>
      <pubDate>Thu, 25 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://teh.github.io/posts/monitoring-nvidia-gpu-with-prometheus/</guid>
      <description>&lt;p&gt;I have a &lt;a href=&#34;https://pcpartpicker.com/user/pahLa6fi/saved/&#34;target=&#34;_blank&#34;&gt;deep learning box&lt;/a&gt; that runs various computations on both CPU and GPU. The ability to off-load expensive computations from my laptop is fantastic.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>3d-printing a lens cap</title>
      <link>https://teh.github.io/posts/3d-printing-a-lens-cap/</link>
      <pubDate>Thu, 11 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://teh.github.io/posts/3d-printing-a-lens-cap/</guid>
      <description>&lt;p&gt;While phone cameras are getting really amazing I still like my old Sony because it allows me to fiddle with exposure etc.; It has a very good sensor and lens.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Deep-learning Python environment with Nix</title>
      <link>https://teh.github.io/posts/deep-learning-python-environment-with-nix/</link>
      <pubDate>Wed, 10 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://teh.github.io/posts/deep-learning-python-environment-with-nix/</guid>
      <description>&lt;p&gt;Getting the deep learning environment with all NVidia libaries set up is a bit fiddly. Thankfully I can lean on Nix for that as well.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Prepare NixOS disk image for another computer</title>
      <link>https://teh.github.io/posts/prepare-nixos-disk-image-for-another-computer/</link>
      <pubDate>Wed, 29 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://teh.github.io/posts/prepare-nixos-disk-image-for-another-computer/</guid>
      <description>&lt;p&gt;When installing my deep-learning box I didn&#39;t have a monitor so I had to blast the disk-image straight onto a disk with &lt;code&gt;dd&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Unit testing with types</title>
      <link>https://teh.github.io/posts/unit-testing-with-types/</link>
      <pubDate>Fri, 22 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://teh.github.io/posts/unit-testing-with-types/</guid>
      <description>&lt;p&gt;I&#39;m an incredibly sloppy programmer, and I lean on the compiler heavily to help me not be stupid. One of my favourite things is to use types to enforce properties of data.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quick IPython shells with nix-shell</title>
      <link>https://teh.github.io/posts/ipython-nix/</link>
      <pubDate>Thu, 11 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://teh.github.io/posts/ipython-nix/</guid>
      <description>&lt;p&gt;I often want to quickly experiment with a Python package without the
whole virtualenv shenanigans. For that I have an &lt;code&gt;ipython-nix&lt;/code&gt; command
in my &lt;code&gt;.bashrc&lt;/code&gt;:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A lot of websockets in Haskell</title>
      <link>https://teh.github.io/posts/haskell-websocket-tsung-benchmark/</link>
      <pubDate>Thu, 05 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://teh.github.io/posts/haskell-websocket-tsung-benchmark/</guid>
      <description>&lt;p&gt;I really enjoyed reading how the phoenix-framework people managed to
get to
&lt;a href=&#34;http://www.phoenixframework.org/v1.0.0/blog/the-road-to-2-million-websocket-connections&#34;target=&#34;_blank&#34;&gt;two million active websocket connections&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&#39;ve heard some very smart people say that Haskell has an amazing
runtime with very cheap threads. I have no reason to disbelieve them
but we thought it&#39;d be fun to see how Haskell fares in a comparable
setup.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The four horsemen of design</title>
      <link>https://teh.github.io/posts/four-horsemen-of-design/</link>
      <pubDate>Thu, 26 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://teh.github.io/posts/four-horsemen-of-design/</guid>
      <description>&lt;p&gt;As a fairly technical agency we do occasionally need help from our
fantastic freelance designer to get a good looking product. You can
read her take on design rules
&lt;a href=&#34;http://manifesto.co.uk/design-principles-gestalt-white-space-perception/&#34;target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Experience report: Rocket lander in Elm</title>
      <link>https://teh.github.io/posts/rocket-lander-in-elm/</link>
      <pubDate>Sun, 15 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://teh.github.io/posts/rocket-lander-in-elm/</guid>
      <description>&lt;p&gt;Writing anything substantial in JavaScript is hard because JavaScript
lacks many of the tools programmers expect these days, like a coherent
and strong type system.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How does a Dokku work?</title>
      <link>https://teh.github.io/posts/how-does-a-dokku-work/</link>
      <pubDate>Mon, 19 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://teh.github.io/posts/how-does-a-dokku-work/</guid>
      <description>&lt;p&gt;There are many implementations for running code in a way pioneered by Heroku which is basically this:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Stuff I learned - 3</title>
      <link>https://teh.github.io/posts/stuff-i-learned-3/</link>
      <pubDate>Tue, 22 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://teh.github.io/posts/stuff-i-learned-3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Stuff I learned - 2</title>
      <link>https://teh.github.io/posts/stuff-i-learned-2/</link>
      <pubDate>Tue, 17 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://teh.github.io/posts/stuff-i-learned-2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Load balancing via iptables</title>
      <link>https://teh.github.io/posts/load-balancing-via-iptables/</link>
      <pubDate>Fri, 09 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://teh.github.io/posts/load-balancing-via-iptables/</guid>
      <description>&lt;p&gt;Traditionally balancing between web workers has been implemented with a prefork server. I.e. the controlling process opens a socket, forks a few workers who then &lt;code&gt;accept&lt;/code&gt; on that socket. The kernel will distribute the load accordingly.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Stuff I learned - 1</title>
      <link>https://teh.github.io/posts/stuff-i-learned-1/</link>
      <pubDate>Fri, 09 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://teh.github.io/posts/stuff-i-learned-1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Mapping between random-looking and increasing IDs</title>
      <link>https://teh.github.io/posts/randomising_ids/</link>
      <pubDate>Sun, 02 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>https://teh.github.io/posts/randomising_ids/</guid>
      <description>&lt;p&gt;Sometimes it&#39;s nice to have non-consecutive user-facing IDs. E.g. if you don&#39;t want to show away how many items you have in your database. Common approaches are UUIDs or encoding random bytes as base64. The downside is that those need an extra database column. For example, map (0 -&amp;gt; 29319, 1 -&amp;gt; 58998, 2 -&amp;gt; 29598, &amp;hellip;).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Backing up from gmail</title>
      <link>https://teh.github.io/posts/gmail_backup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://teh.github.io/posts/gmail_backup/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>